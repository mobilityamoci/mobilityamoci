<?php

namespace App\Http\Livewire;

use App\Models\School;
use App\Models\User;
use Mediconesystems\LivewireDatatables\Column;
use Mediconesystems\LivewireDatatables\Http\Livewire\LivewireDatatable;
use Mediconesystems\LivewireDatatables\NumberColumn;
use Spatie\Permission\Models\Role;

class UsersTable extends LivewireDatatable
{
    public $onlyUnaccepted = false;

    public $model = User::class;

    public $searchable = ['name', 'surname', 'email'];

    public function mount($onlyUnaccepted = false, $model = false, $include = [], $exclude = [], $hide = [], $dates = [], $times = [], $searchable = [], $sort = null, $hideHeader = null, $hidePagination = null, $perPage = null, $exportable = false, $hideable = false, $beforeTableSlot = false, $buttonsSlot = false, $afterTableSlot = false, $params = [])
    {
        $this->onlyUnaccepted = $onlyUnaccepted;
        parent::mount($model, $include, $exclude, $hide, $dates, $times, $searchable, $sort, $hideHeader, $hidePagination, $perPage, $exportable, $hideable, $beforeTableSlot, $buttonsSlot, $afterTableSlot, $params); // TODO: Change the autogenerated stub
    }

    public function builder()
    {
        $q = User::query()->with(['roles', 'schools']);

        if ($this->onlyUnaccepted) {
            $q->whereNull('accepted_at');
            $school_ids = auth()->user()->schools()->pluck('id');
            $q->whereHas('schools', function ($query) use ($school_ids) {
                $query->whereIn('schools.id', $school_ids);
            });

        } else {
            $q->whereNotNull('accepted_at');
        }

        return $q;

    }

    public function columns()
    {
        $columns = [
            NumberColumn::name('id')
                ->label('ID'),
            Column::name('name')
                ->label('Nome'),
            Column::name('surname')
                ->label('Cognome'),
            Column::name('email')
                ->label('Email Verificata'),
        ];

        if ($this->onlyUnaccepted) {
            $columns[] = Column::callback(['id'], function ($id) {
                return User::find($id)->firstRoleString();
            })
                ->unsortable()
                ->label('Chiede di iscriversi come:');
            $columns[] = Column::callback(['id', 'name'], function ($id, $name) {
                return view('livewire.livewire-tables.users-unaccepted-actions', ['id' => $id, 'name' => $name]);
            });
        } else {
            $columns[] = Column::name('roles.name')
                ->label('Ruoli')
                ->unsortable()
                ->filterOn('roles.name')
                ->filterable($this->getRolesFilterProperty());
            $columns[] = Column::name('schools.name')
                ->label('Scuole')
                ->unsortable()
                ->filterOn('schools.name')
                ->filterable($this->getSchoolsFilterProperty());

            $columns[] = Column::callback(['id', 'name'], function ($id, $name) {
                return view('livewire.livewire-tables.users-actions', ['id' => $id, 'name' => $name]);
            });
        }


        return $columns;
    }

    public function getRolesFilterProperty()
    {
        return Role::pluck('name');
    }

    public function getSchoolsFilterProperty()
    {
        return School::pluck('name');
    }

}
